<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:vm="clr-namespace:Projekt.ViewModels"
                    xmlns:vw="clr-namespace:Projekt.Views"
                    >

        <!--tu bedziemy laczyc View z ViewModel zakładek-->

        <DataTemplate DataType="{x:Type vm:WszystkieTowaryViewModel}">
            <vw:WszystkieTowary/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:NowyTowarViewModel}">
            <vw:NowyTowarView/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:NowyKontrachentViewModel}">
            <vw:NowyKontrahent/>
        </DataTemplate>
    
        <DataTemplate DataType="{x:Type vm:WszyscyKontracheciViewModel}">
            <vw:WszyscyKontrachenciView/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:NowaFakturaViewModel}">
                    <vw:NowaFakturaView/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:WszystkieFakturyViewModel}">
            <vw:WszystkieFakturyView/>
        </DataTemplate>

    <DataTemplate DataType="{x:Type vm:RodzajKontrahentaViewModel}">
        <vw:RodzajKontrahentaView/>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type vm:NowyRodzajKontrahentaViewModel}">
        <vw:NowyRodzajKontrahenta/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:WszystkieAdresyViewModel}">
        <vw:WszytskieAdresyView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NowyAdresViewModel}">
        <vw:NowyAdresView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:WszystkieStatusyKontrahentaViewModel}">
        <vw:WszystkieStatusyKontrahentaView/>
    </DataTemplate>
    <!--tu jest koniec laczenia View z ViewModel zakładek-->

    <Style x:Key="ButtoBok90" TargetType="{x:Type Button}">
        <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
        <Setter Property="Width" Value="70"/>
        <Setter Property="Height"  Value="25"/>
        <Setter Property="Margin"  Value="-20,25,-20,0"/>
        <Setter Property="VerticalAlignment"  Value="Top"/>
        <Setter Property="Background" Value="#FF156A91"/>
    </Style>

    <Style x:Key="ToggleButtonStandardowy" TargetType="{x:Type ToggleButton}">
        <Setter Property="Width" Value="70"/>
        <Setter Property="Height"  Value="32"/>
        <Setter Property="Margin"  Value="2"/>
    </Style>

    <Style x:Key="LabelStatusBar" TargetType="{x:Type Label}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Margin" Value="0,-7,0,0"/>
        <Setter Property="FontSize" Value="14"/>
    </Style>

    <Style x:Key="MainHCCStyle" TargetType="{x:Type HeaderedContentControl}">
            <Setter Property="HeaderTemplate">
                <Setter.Value>
                    <DataTemplate>

                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="IsTabStop" Value="False" />
            <Setter Property="Template">
                <Setter.Value>
                    <!-- 
        This template ensures that content of a HeaderedContentControl 
        fills the available vertical space. 
        -->
                    <ControlTemplate TargetType="{x:Type HeaderedContentControl}">
                        <DockPanel>
                            <ContentPresenter 
              DockPanel.Dock="Top"
              ContentSource="Header" 
              ContentTemplate="{TemplateBinding HeaderTemplate}" 
              />
                            <ContentPresenter 
              ContentSource="Content" 
              ContentTemplate="{TemplateBinding ContentTemplate}" 
              />
                        </DockPanel>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--
  This style ensures that the borders in the main window are consistent.
  -->
        <Style x:Key="MainBorderStyle" TargetType="{x:Type Border}">
            <Setter Property="Background" Value="WhiteSmoke" />
            <Setter Property="BorderBrush" Value="LightGray" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="CornerRadius" Value="5" />
            <Setter Property="SnapsToDevicePixels" Value="True" />
        </Style>

        <!--
  This template explains how to render the list of commands on the left
  side in the main window (the 'Control Panel' area).
  -->
        <!--<DataTemplate x:Key="CommandsTemplate">
        <ItemsControl IsTabStop="False" ItemsSource="{Binding}" Margin="6,2">
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <Button Content="{Binding DisplayName}" Command="{Binding Path=Command}" Margin="6" Padding="5" Background="LightBlue" BorderThickness="0"/>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </DataTemplate>-->

        <Style x:Key="NewMenuButton" TargetType="{x:Type Button}">
            <Setter Property="Foreground" Value="LightGray"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Margin" Value="6"/>
            <Setter Property="Padding" Value="15, 10, 15, 10"/>
            <Setter Property="FontSize" Value="13"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center" Margin="{TemplateBinding Padding}"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="FloralWhite"/>
                    <Setter Property="Foreground" Value="Black"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <DataTemplate x:Key="CommandsTemplate">
            <ItemsControl IsTabStop="False" ItemsSource="{Binding}" Margin="0,6,0,0" Background="#FF156A91">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <Button Style="{StaticResource NewMenuButton}" Command="{Binding Path=Command}">
                            <Button.Content>
                                <StackPanel Orientation="Horizontal">
                                    <Image>
                                        <Image.Style>
                                            <Style TargetType="{x:Type Image}">
                                                <Setter Property="Source" Value="{Binding IconUrl}"/>
                                                <Setter Property="Width" Value="25"/>
                                                <Setter Property="Margin" Value="0, 0, 10, 0"/>
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Button, AncestorLevel=1}, Path=IsMouseOver}" Value="True">
                                                        <Setter Property="Source" Value="{Binding IconHoverUrl}"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Image.Style>
                                    </Image>
                                    <TextBlock Text="{Binding DisplayName}"/>
                                </StackPanel>
                            </Button.Content>
                        </Button>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </DataTemplate>

        <Style x:Key="NewSideMenuButton" TargetType="{x:Type Button}">
            <Setter Property="Margin" Value="0"/>
            <Setter Property="Padding" Value="15, 10, 15, 10"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center" Margin="{TemplateBinding Padding}"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="FloralWhite"/>
                    <Setter Property="Foreground" Value="Black"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <DataTemplate x:Key="SideMenuTemplate">
            <ItemsControl IsTabStop="False" ItemsSource="{Binding}" Background="CornflowerBlue">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <Button Style="{StaticResource NewSideMenuButton}" Command="{Binding Path=Command}">
                            <Button.Content>
                                <Image>
                                    <Image.Style>
                                        <Style TargetType="{x:Type Image}">
                                            <Setter Property="Source" Value="{Binding IconUrl}"/>
                                            <Setter Property="Width" Value="20"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Button, AncestorLevel=1}, Path=IsMouseOver}" Value="True">
                                                    <Setter Property="Source" Value="{Binding IconHoverUrl}"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Image.Style>
                                </Image>
                            </Button.Content>
                        </Button>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </DataTemplate>

        <!-- 
  This template explains how to render 
  a tab item with a close button.
  -->
        <DataTemplate x:Key="ClosableTabItemTemplate">
            <DockPanel Width="120">
                <Button 
        Command="{Binding Path=CloseCommand}"
        Content="X"
        Cursor="Hand"
        DockPanel.Dock="Right"
        Focusable="False"
        FontFamily="Courier" 
        FontSize="9"
        FontWeight="Bold"  
        Margin="1"
        Padding="0"
        VerticalContentAlignment="Bottom"
        Width="16" Height="16" 
        Background="CadetBlue"
        />
                <ContentPresenter 
        Content="{Binding Path=DisplayName}" 
        VerticalAlignment="Center" 
        />
            </DockPanel>
        </DataTemplate>

        <!--
  This template explains how to render the 'Workspace' content area in the main window.
  -->
        <DataTemplate x:Key="WorkspacesTemplate">
            <TabControl 
      IsSynchronizedWithCurrentItem="True" 
      ItemsSource="{Binding}" 
      ItemTemplate="{StaticResource ClosableTabItemTemplate}"
      Margin="4"
      />
        </DataTemplate>

        <Style x:Key="StatusBarStyle" TargetType="{x:Type StatusBar}">
            <Setter Property="Background" Value="CornflowerBlue"/>
            <Setter Property="Foreground" Value="LightGray"/>
        </Style>


    </ResourceDictionary>
